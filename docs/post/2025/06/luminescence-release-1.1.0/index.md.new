---
title: Luminescence Release 1.1.0
date: '2025-06-11'
categories:
  - 'Luminescence'
author: Marco Colombo
description: 'Luminescence version 1.1.0'
---

Only about 3 months from our [previous release][v101], we are happy to
announce the release of **version 1.1.0** of [Luminescence R package][lumi].
This is a major release, which comes with a few new features and many
improvements, especially on the graphical side. In total we addressed 99
issues in 530 commits.

Many of the changes came from our work on the [RLumShiny package][rshiny],
which made us consider in much greater detail some of the `Luminescence`
functions. We will shortly bring what we think are exciting news on the
`RLumShiny` side, but for the moment, let's concentrate on what happened
during this release cycle.

<!--more-->

### New functions

There are two new functions that have entered the already large family
of `Luminescence` functions to provide some convenient tools to manipulate
`RLum-class` objects: `remove_SignalBackgroun()` and `remove_RLum()`.

A frequently encountered task involves subtracting curves representing a
background signal from luminescence curves, such as OSL, TL, or RF. The new
`remove_SignalBackground()`function aims to simplify this operation. By default,
the function assumes that if curves are presented in pairs, the second curve
represents a background signal that needs to be removed from the first curve.
Alternatively, a specific background curve can be provided (it can also be just
the index of a curve in the current object), and this is then subtracted from
the other curves. This provides a user-friendly method to subtract background
signals from various curves in `RLum.Analysis` objects without having to write
`lapply()` loops, which require some understanding of how various `RLum-class`
objects work and interface.

The `remove_RLum()` function completes the set of methods that can handle and
modify `RLum-class` objects. It operates on `RLum.Analysis` objects and allows
to remove unwanted records from datasets. For more insight on how this and
its associated methods could help in your analysis pipelines,
[read the detailed article][rlum].

### Graphical improvements

The work on `RLumShiny` focused primarily on these functions:

* `analyse_IRSAR.RF()`
* `analyse_portableOSL()`
* `calc_AliquotSize()`
* `calc_FiniteMixture()`
* `calc_Huntley2006()`
* `fit_LMCurve()`

For each of them we could very quickly test a large number of combinations of
supported arguments and graphical parameters, and thus discover and fix several
crashes, and cases in which those functions didn't provide sufficient
flexibility in controlling the graphical output.

For example, not all plot elements scaled uniformly when setting a non-default
value for the `cex` graphical parameter, which controls the magnification level
of text and symbols in a plot. This would result in images like the following,
in which the legend text resulted much bigger than the other elements at
`cex = 2`.
![magnification](magnification-cex.png "Previous issue at high magnification")

Many of the above-listed functions revealed to be affected by similar issues.

The complexity of some function interactions, and the at times unpredictable
behaviour of `par()` (the R function that sets and stores all graphical
parameters), have always made it quite hard to have a reliable and good-looking
output from `analyse_pIRIRSequence()`. We tackled this in [issue 831][iss831],
but it was clear from the onset that it would require work in two other
functions (which would still to continue working well also when used on their
own). This led to a number of small fixes (but they took actually quite a lot
of time to find and test) in particular to `plot_DoseResponseCurve()`.
However, the final outcome is much better than before:

![pIRIR](pIRIR.png "Current output of analyse_pIRIRSequence()")

### Stability and performance improvements

Besides the number of crashes discovered by using `RLumShiny`, there are a
few cases where we improved the package performance.

For example, function `cal